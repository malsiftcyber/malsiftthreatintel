version: '3.8'

services:
  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: malsift-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - malsift-network
    restart: unless-stopped

  # Certbot for Let's Encrypt certificates
  certbot:
    image: certbot/certbot
    container_name: malsift-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/ssl:/etc/nginx/ssl
    command: certonly --webroot --webroot-path=/var/www/html --email your-email@domain.com --agree-tos --no-eff-email -d your-domain.com
    depends_on:
      - nginx
    networks:
      - malsift-network

  # Backend service (existing)
  backend:
    build: ./backend
    container_name: malsift-backend
    environment:
      - DATABASE_URL=postgresql://malsift_user:${DB_PASSWORD}@postgres:5432/malsift
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend:/app
      - ./custom_parsers:/app/custom_parsers
    depends_on:
      - postgres
      - redis
    networks:
      - malsift-network
    restart: unless-stopped

  # Frontend service (existing)
  frontend:
    build: ./frontend
    container_name: malsift-frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-https://your-domain.com/api}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - malsift-network
    restart: unless-stopped

  # PostgreSQL (existing)
  postgres:
    image: postgres:15-alpine
    container_name: malsift-postgres
    environment:
      - POSTGRES_DB=malsift
      - POSTGRES_USER=malsift_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - malsift-network
    restart: unless-stopped

  # Redis (existing)
  redis:
    image: redis:7-alpine
    container_name: malsift-redis
    volumes:
      - redis_data:/data
    networks:
      - malsift-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  certbot-etc:
  certbot-var:

networks:
  malsift-network:
    driver: bridge
