version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cyber_threat_intel_db
    environment:
      POSTGRES_DB: cyber_threat_intel
      POSTGRES_USER: threatintel
      POSTGRES_PASSWORD: threatintel123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - threat_intel_network

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: cyber_threat_intel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - threat_intel_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyber_threat_intel_backend
    environment:
      - DATABASE_URL=postgresql://threatintel:threatintel123@postgres:5432/cyber_threat_intel
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - threat_intel_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cyber_threat_intel_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - threat_intel_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Celery Worker for background jobs
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyber_threat_intel_worker
    environment:
      - DATABASE_URL=postgresql://threatintel:threatintel123@postgres:5432/cyber_threat_intel
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - threat_intel_network
    command: celery -A app.workers.celery_app worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyber_threat_intel_beat
    environment:
      - DATABASE_URL=postgresql://threatintel:threatintel123@postgres:5432/cyber_threat_intel
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - threat_intel_network
    command: celery -A app.workers.celery_app beat --loglevel=info

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: cyber_threat_intel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - threat_intel_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cyber_threat_intel_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - threat_intel_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  threat_intel_network:
    driver: bridge
